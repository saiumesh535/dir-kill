name: Build, Test, and Release

on:
  push:
    branches: [ master, main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ master, main ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test:
    name: Test on Linux
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust: [1.88.0]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          override: true

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Run tests
        run: cargo test --verbose

      - name: Run clippy
        run: |
          rustup component add clippy
          cargo clippy -- -D warnings

      - name: Check formatting
        run: |
          rustup component add rustfmt
          cargo fmt -- --check

  build-linux:
    name: Build for Linux
    needs: [test]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            artifact_name: dir-kill-linux-x86_64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: 1.88.0
          target: ${{ matrix.target }}
          override: true

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Build release binary
        run: |
          cargo build --release --target ${{ matrix.target }}
          strip target/${{ matrix.target }}/release/dir-kill

      - name: Create release directory
        run: mkdir -p release

      - name: Copy binary to release directory
        run: cp target/${{ matrix.target }}/release/dir-kill release/${{ matrix.artifact_name }}

      - name: Create checksum
        run: |
          cd release
          sha256sum ${{ matrix.artifact_name }} > ${{ matrix.artifact_name }}.sha256

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: |
            release/${{ matrix.artifact_name }}
            release/${{ matrix.artifact_name }}.sha256

  build-windows:
    name: Build for Windows
    needs: [test]
    runs-on: windows-latest
    strategy:
      matrix:
        include:
          - target: x86_64-pc-windows-msvc
            artifact_name: dir-kill-windows-x86_64.exe

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: 1.88.0
          target: ${{ matrix.target }}
          override: true

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Build release binary
        run: cargo build --release --target ${{ matrix.target }}

      - name: Create release directory
        run: mkdir -p release

      - name: Copy binary to release directory
        run: cp target/${{ matrix.target }}/release/dir-kill.exe release/${{ matrix.artifact_name }}

      - name: Create checksum
        run: |
          cd release
          certutil -hashfile ${{ matrix.artifact_name }} SHA256 > ${{ matrix.artifact_name }}.sha256

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: |
            release/${{ matrix.artifact_name }}
            release/${{ matrix.artifact_name }}.sha256

  build-macos:
    name: Build for macOS
    needs: [test]
    runs-on: macos-latest
    strategy:
      matrix:
        include:
          - target: x86_64-apple-darwin
            artifact_name: dir-kill-macos-x86_64
          - target: aarch64-apple-darwin
            artifact_name: dir-kill-macos-aarch64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: 1.88.0
          target: ${{ matrix.target }}
          override: true

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Build release binary
        run: |
          cargo build --release --target ${{ matrix.target }}
          strip target/${{ matrix.target }}/release/dir-kill

      - name: Create release directory
        run: mkdir -p release

      - name: Copy binary to release directory
        run: cp target/${{ matrix.target }}/release/dir-kill release/${{ matrix.artifact_name }}

      - name: Create checksum
        run: |
          cd release
          shasum -a 256 ${{ matrix.artifact_name }} > ${{ matrix.artifact_name }}.sha256



  release:
    name: Create Release
    needs: [test, build-linux, build-windows, build-macos]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get version from Cargo.toml
        id: get_version
        run: |
          VERSION=$(grep '^version = ' Cargo.toml | cut -d '"' -f2)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=v$VERSION" >> $GITHUB_OUTPUT

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create release assets directory
        run: mkdir -p release-assets

      - name: Move artifacts to release directory
        run: |
          find artifacts -name "dir-kill-*" -type f | while read file; do
            cp "$file" release-assets/
          done

      - name: print files
        run: ls -la release-assets

      # - name: Releasing
      #   uses: ncipollo/release-action@v1
      #   with:
      #     name: "Release ${{ steps.get_version.outputs.version }}"
      #     tag: ${{ steps.get_version.outputs.tag }}
      #     artifacts: "release-assets/*"
      #     token: ${{ secrets.GITHUB_TOKEN }}